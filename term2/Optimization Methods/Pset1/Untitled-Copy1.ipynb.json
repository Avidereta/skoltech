{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Problem 1:** *Capacitated facility location.* \n",
    "\n",
    "You need to solve a *capacitated facility location* problem. There are a number of clients that can be served by a number of potential facilities. As in the case of a common (uncapacitated) facility location problem, you need to decide which facilities to open (paying the opening cost for each) and which clients to serve at each facility (paying the assignment cost). Each client must be assigned to one opened facility. In addition, you have a cap on how many clients each facility can serve. As usual, you want to minimize the costs.\n",
    "\n",
    "Implement the following algorithms and investigate them. Use the attached script to generate the data, and to visualize the results. You are supposed to play with different configurations and sizes of the problem. Please make your report detailed (otherwise lower amount of points then indicated may be assigned).\n",
    "\n",
    "* (2 points). Implement a **greedy algorithm** for the problem.\n",
    "* (3 points). Implement **some local optimization algorithm**. Try to design powerful moves that are at the same time easy to search through. **Important:** your move should connect the whole domain, i.e. for any pair of feasible solutions, there should exist a sequence of moves from the family you design that transform one solution to the other.\n",
    "* (3 points). Implement the **simulated annealing algorithm** based on the best of your local optimization algorithms. Play with the schedule and see how it affects the results. Compare with the local optimization algorithm that you base upon. Note, that if implemented correctly, simulated annealing should improve over the local optimization algorithm.\n",
    "\n",
    "Below is the solution that uses a mixed-integer solver (we will come to that in week 3). You can use it as a reference for small instances (for which it will give you a global optimum), and also reuse the visualization code. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "No module named gurobipy",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-2bb76843ea7c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mgurobipy\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mscipy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mImportError\u001b[0m: No module named gurobipy"
     ]
    }
   ],
   "source": [
    "from gurobipy import *\n",
    "\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "from numpy import random\n",
    "from numpy import matlib\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "np.random.seed(2)\n",
    "\n",
    "C = 20; # number of clients\n",
    "clients = np.random.rand(2,C); #client positions\n",
    "F = 15; #number of facilities\n",
    "facilities = np.random.rand(2,F);\n",
    "\n",
    "capacities = np.ones((F,))*4; #maximum number of clients per facility\n",
    "\n",
    "dx = np.matlib.repmat(clients[0,:],F,1) - np.matlib.repmat(facilities[0,:],C,1).transpose();\n",
    "dy = np.matlib.repmat(clients[1,:],F,1) - np.matlib.repmat(facilities[1,:],C,1).transpose();\n",
    "\n",
    "assignment_costs = 3*(dx*dx + dy*dy); #the assignment cost is the distance squared\n",
    "\n",
    "opening_costs = np.ones((F,));\n",
    "\n",
    "# create the model\n",
    "m = Model(\"facility\")\n",
    "\n",
    "y = []\n",
    "for i_f in range(F):\n",
    "    y.append(m.addVar(vtype=GRB.BINARY))\n",
    "\n",
    "x = []    \n",
    "for i_f in range(F):\n",
    "    x.append([])\n",
    "    for i_c in range(C):\n",
    "        x[i_f].append(m.addVar(vtype=GRB.BINARY))\n",
    "\n",
    "# the objective is to minimize the total fixed and variable costs\n",
    "m.modelSense = GRB.MINIMIZE\n",
    "\n",
    "# update model to integrate new variables\n",
    "m.update()\n",
    "\n",
    "# set optimization objective - minimize sum of fixed costs\n",
    "obj_summands = []\n",
    "for i_f in range(F):\n",
    "    obj_summands.append(opening_costs[i_f]*y[i_f])\n",
    "    \n",
    "for i_f in range(F):\n",
    "    for i_c in range(C):\n",
    "        obj_summands.append(assignment_costs[i_f][i_c]*x[i_f][i_c])\n",
    "\n",
    "m.setObjective(quicksum(obj_summands))  \n",
    "\n",
    "# set constraints\n",
    "for i_c in range(C):\n",
    "    client_constr_summands = [x[i_f][i_c] for i_f in range(F)]\n",
    "    m.addConstr(sum(client_constr_summands), GRB.EQUAL, 1.0)\n",
    "        \n",
    "for i_f in range(F):        \n",
    "    facility_constr_summands = [x[i_f][i_c] for i_c in range(C)]\n",
    "    m.addConstr(sum(facility_constr_summands), GRB.LESS_EQUAL, capacities[i_f]*y[i_f])       \n",
    "\n",
    "for i_f in range(F):        \n",
    "    facility_constr_summands = [x[i_f][i_c] for i_c in range(C)]\n",
    "    m.addConstr(max(facility_constr_summands), GRB.LESS_EQUAL, y[i_f])     \n",
    "\n",
    "# optimize\n",
    "  \n",
    "m.optimize()\n",
    "\n",
    "# plot the solution\n",
    "facilities_opened = [y[i_f].X for i_f in range(F)]    \n",
    "clients_assignment = [i_f for i_f in range(F) for i_c in range(C) if x[i_f][i_c].X != 0]\n",
    "\n",
    "    \n",
    "plt.scatter(clients[0,:], clients[1,:], s=50.0, c=clients_assignment)\n",
    "plt.scatter(facilities[0,:], facilities[1,:], s=200.0, c=range(F), linewidth = [5*el for el in facilities_opened])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from gurobipy import *\n",
    "\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "from numpy import random\n",
    "from numpy import matlib\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "np.random.seed(1)\n",
    "\n",
    "C = 20; # number of clients\n",
    "clients = np.random.rand(2,C); #client positions\n",
    "F = 15; #number of facilities\n",
    "facilities = np.random.rand(2,F);\n",
    "\n",
    "capacities = np.ones((F,))*4;#maximum number of clients per facility\n",
    "\n",
    "dx = np.matlib.repmat(clients[0,:],F,1) - np.matlib.repmat(facilities[0,:],C,1).transpose();\n",
    "dy = np.matlib.repmat(clients[1,:],F,1) - np.matlib.repmat(facilities[1,:],C,1).transpose();\n",
    "\n",
    "assignment_costs = 3*(dx*dx + dy*dy); #the assignment cost is the distance squared\n",
    "\n",
    "threshold = 4\n",
    "opening_cost = 1\n",
    "    \n",
    "\n",
    "print \"Input Data \", \"\\n number of clients:\", C, \"\\n number of facilities:\", F,\"\\n facilities capacity:\", threshold, \n",
    "\n",
    "\n",
    "\n",
    "cost, opened_facilities, assignments, facility_occupancy = greedy(assignment_costs, opening_cost, threshold)\n",
    "print \"\\n \\n Greedy algorithm\",\"\\n cost:\", cost \n",
    "#\"\\n facilities to open:\", opened_facilities, \n",
    "#print \"greedy\", facility_occupancy \n",
    "\n",
    "# plot the solution\n",
    "facilities_assignments = np.zeros(F)\n",
    "for i in opened_facilities:\n",
    "    facilities_assignments[i] = 1\n",
    "clients_assignment = np.arange(0, C)\n",
    "\n",
    "plt.title(\"Greedy algorithm\")    \n",
    "plt.scatter(clients[0,:], clients[1,:], s=50.0, c=clients_assignment)\n",
    "plt.scatter(facilities[0,:], facilities[1,:], s=200.0, c=range(F), linewidth = [5*el for el in facilities_assignments])\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "assignments, cost = local(assignment_costs, opening_cost, threshold)\n",
    "print \"\\n Local optimization\", \"\\n cost:\", cost\n",
    " #\"\\n facilities to open:\", set(assignments.values()), \n",
    "    \n",
    "\n",
    "facility_occupancy = calc_fclt_occup(assignments, F)\n",
    "#print \"local\", facility_occupancy     \n",
    "    \n",
    "# plot the solution\n",
    "facilities_assignments = np.zeros(F)\n",
    "for i in opened_facilities:\n",
    "    facilities_assignments[i] = 1\n",
    "clients_assignment = np.arange(0, C)\n",
    "\n",
    "plt.title(\"Local algorithm\")    \n",
    "plt.scatter(clients[0,:], clients[1,:], s=50.0, c=clients_assignment)\n",
    "plt.scatter(facilities[0,:], facilities[1,:], s=200.0, c=range(F), linewidth = [5*el for el in facilities_assignments])\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "assignments, cost = simulated_annealing (assignment_costs, opening_cost, threshold)\n",
    "print \"\\n Simulated annealing\",\"\\n cost:\", cost \n",
    "# \"\\n facilities to open:\", set(assignments.values()), \n",
    "\n",
    "    \n",
    "# plot the solution\n",
    "facilities_assignments = np.zeros(F)\n",
    "for i in opened_facilities:\n",
    "    facilities_assignments[i] = 1\n",
    "clients_assignment = np.arange(0, C)\n",
    "\n",
    "plt.title(\"Simulated annealing algorithm\")    \n",
    "plt.scatter(clients[0,:], clients[1,:], s=50.0, c=clients_assignment)\n",
    "plt.scatter(facilities[0,:], facilities[1,:], s=200.0, c=range(F), linewidth = [5*el for el in facilities_assignments])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solution\n",
    "\n",
    "##### Greedy\n",
    "* A greedy algorithm is an algorithm that follows the problem solving heuristic of making the locally optimal choice at each stage with the hope of finding a global optimum. \n",
    "* We will go through clients and will choose best facility according to current facilities occupancy and costs.\n",
    "\n",
    "##### Local optimization\n",
    "* Based on the results of greedy algorithm, but it can be implemented based on random solution\n",
    "* On each step we take 2 (or 3, 4) clients from their facilities and calculate the profitability of their replacement.\n",
    "In case of profitability we replace them and then work with new assignments.\n",
    "\n",
    "#### Simulated annealing\n",
    "* Is based on local optimization algorithm. At each step we choose randomly n clients and facilities for them, we calculate new price including the opening costs and assignments cost. \n",
    "* We surely accept this new assignment if the total cost is lower then initial. Otherwise, we accept this new assignment with probability $$ p = \\exp(\\frac{old cost - new cost}{T_i})$$, where $T_i$ is an element of decreasing to zero sequence belonged to the interval $[0,1]$, $T_{i+1} = 0.99 * T_i$. This allows us to get out from the local minimum.\n",
    "* Then we do the same actions with accepted or initial assignmets until $T \\geq 0$\n",
    "* It can be seen that the results for simulated annealing algorithm are the best."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 461,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from collections import Counter\n",
    "import random as rnd\n",
    "\n",
    "def greedy(assignment_costs, opening_cost, threshold):\n",
    "\n",
    "    F = assignment_costs.shape[0]\n",
    "    C = assignment_costs.shape[1]\n",
    "    \n",
    "    facilities = np.arange(0, F)\n",
    "    opened_facilities = []\n",
    "    facility_occupancy = [0]*F\n",
    "    cost = 0\n",
    "    assignments = {}\n",
    "\n",
    "    for cl in range (0, C):    \n",
    "        if (cl == 0):\n",
    "            choosed = np.argmin(assignment_costs[:, cl])\n",
    "            opened_facilities.append(choosed)\n",
    "            facility_occupancy[choosed] += 1\n",
    "            cost += assignment_costs[choosed, cl]\n",
    "            assignments[cl] = choosed\n",
    "            \n",
    "            closed_facilities = list(set(facilities) - set(opened_facilities))\n",
    "            \n",
    "\n",
    "        else:\n",
    "            opened_half_facilities = [] #incomplete opened facilities on this step\n",
    "            for fclt in opened_facilities:\n",
    "                if (facility_occupancy[fclt]  < threshold):\n",
    "                    opened_half_facilities.append(fclt)\n",
    "\n",
    "            closed_facilities = list(set(facilities) - set(opened_facilities))\n",
    "\n",
    "\n",
    "            if (len(opened_half_facilities) > 0):\n",
    "\n",
    "                # open new one\n",
    "                if (min(assignment_costs[opened_half_facilities, cl]) >= \\\n",
    "                    opening_cost + min(assignment_costs[closed_facilities,cl])):\n",
    "\n",
    "                    temp = np.argmin(assignment_costs[closed_facilities, cl])\n",
    "                    choosed = closed_facilities[temp]\n",
    "                    opened_facilities.append(choosed)\n",
    "                    cost += assignment_costs[choosed, cl]\n",
    "                    assignments[cl] = choosed\n",
    "                    facility_occupancy[choosed] += 1\n",
    "\n",
    "                # use already opened    \n",
    "                else:\n",
    "                    temp = np.argmin(assignment_costs[opened_half_facilities, cl])\n",
    "                    choosed = opened_half_facilities[temp]\n",
    "                    cost += assignment_costs[choosed, cl]\n",
    "                    assignments[cl] = choosed\n",
    "                    facility_occupancy[choosed] += 1\n",
    "\n",
    "            # no incompele facilities, open new one\n",
    "            else:\n",
    "                temp = np.argmin(assignment_costs[closed_facilities, cl])\n",
    "                choosed = closed_facilities[temp]\n",
    "                opened_facilities.append(choosed)\n",
    "                cost += assignment_costs[choosed, cl]\n",
    "                assignments[cl] = choosed\n",
    "                facility_occupancy[choosed] += 1\n",
    "            \n",
    "    cost += len(opened_facilities)\n",
    "    return cost, opened_facilities, assignments, facility_occupancy\n",
    "\n",
    "\n",
    "\n",
    "def cost_configuration(assignments, assignment_costs):\n",
    "    \n",
    "    cost = len(set(assignments.values()))\n",
    "    for client, facility in assignments.items():\n",
    "        cost += assignment_costs[facility, client]\n",
    "\n",
    "    return cost\n",
    "\n",
    "\n",
    "\n",
    "def local(assignment_costs, opening_cost, threshold):\n",
    "    \n",
    "    F = assignment_costs.shape[0]\n",
    "    C = assignment_costs.shape[1]\n",
    "    \n",
    "    facilities = np.arange(0, F)\n",
    "    clients = np.arange(0,C)\n",
    "    opened_facilities = []\n",
    "    assignments = {}\n",
    "    \n",
    "    cost, opened_facilities, assignments, facility_occupancy = \\\n",
    "        greedy(assignment_costs, opening_cost, threshold)\n",
    "    facility_occupancy = calc_fclt_occup(assignments, F)\n",
    "    \n",
    "\n",
    "    for cl1 in range(0,C):\n",
    "        for cl2 in range(0,C):\n",
    "            new_assignments = assignments.copy()\n",
    "            new_assignments[cl2] = assignments[cl1].copy()\n",
    "            new_assignments[cl1] = assignments[cl2].copy()\n",
    "            if (cost_configuration(new_assignments, assignment_costs) < cost):\n",
    "                assignments = new_assignments.copy()\n",
    "                cost = cost_configuration(new_assignments, assignment_costs)\n",
    "                \n",
    "              \n",
    "    return assignments, cost\n",
    "\n",
    "\n",
    "\n",
    "def calc_fclt_occup (assignment, nmb_facilities):\n",
    "  \n",
    "    opened = Counter(assignments.values()) \n",
    "    facility_occupancy = [0]*nmb_facilities\n",
    "    for fac, oc in opened.items():\n",
    "        facility_occupancy[fac] = oc\n",
    "    return facility_occupancy\n",
    "\n",
    "\n",
    "def find_best_fclt(assignment_costs, assignments, cl, threshold):\n",
    "    \n",
    "    opened = Counter(assignments.values())\n",
    "    available = []\n",
    "    for f,oc in opened.items():\n",
    "        if (oc < 4):\n",
    "            available.append(f)\n",
    "\n",
    "    if (min(assignment_costs[available, cl]) < min(assignment_costs[closed, cl]) + threshold):\n",
    "        fclt = available[np.argmin(assignment_costs[available, cl])]\n",
    "    else:\n",
    "        fclt = closed[np.argmin(assignment_costs[closed, cl])]\n",
    "    assignments[cl] = fclt\n",
    "    return assignments\n",
    "\n",
    "\n",
    "def find_any_fclt(assignment_costs, assignments, cl, threshold):\n",
    "    \n",
    "    opened = Counter(assignments.values())\n",
    "    unavailable = []\n",
    "    for f,oc in opened.items():\n",
    "        if (oc > 3):\n",
    "            unavailable.append(f)\n",
    "    available = list(set(np.arange(len(facility_occupancy))) - set(unavailable))\n",
    "    fclt = rnd.choice(available)\n",
    "    assignments[cl] = fclt\n",
    "    \n",
    "    return assignments\n",
    "\n",
    "\n",
    "def shift(l, n):\n",
    "    return l[n:] + l[:n]\n",
    "\n",
    "\n",
    "def simulated_annealing(assignment_costs, opening_cost, threshold):\n",
    "    \n",
    "    F = assignment_costs.shape[0]\n",
    "    C = assignment_costs.shape[1]\n",
    "    \n",
    "    facilities = np.arange(0, F)\n",
    "    clients = np.arange(0,C)\n",
    "    assignments = {}\n",
    "    \n",
    "    \n",
    "    assignments, cost = local(assignment_costs, opening_cost, threshold)\n",
    "    facility_occupancy = calc_fclt_occup(assignments, F)\n",
    "    \n",
    "    costs = []\n",
    "    max_ = 10000\n",
    "    T = 1\n",
    "    \n",
    "    for t in range(max_):\n",
    "        costs.append(cost_configuration(assignments, assignment_costs))\n",
    "        cls = rnd.sample(clients, 2)\n",
    "        new_assignments = assignments.copy()\n",
    "        b_cost = min(costs)\n",
    "\n",
    "        for i in range(0, len(cls)):\n",
    "            for cl in cls:\n",
    "                new_assignments.pop(cl)\n",
    "            cls = shift(cls, 1) \n",
    "            for cl in cls:\n",
    "                new_assignments = find_best_fclt(assignment_costs, new_assignments, cl, threshold)\n",
    "            T = 0.999 * T \n",
    "            probability = np.exp((cost - cost_configuration(new_assignments, assignment_costs))/T)\n",
    "            Ps.append(probability)\n",
    "       \n",
    "            rand = rnd.random()\n",
    "        \n",
    "            if (cost_configuration(new_assignments, assignment_costs) < cost):\n",
    "                assignments = new_assignments\n",
    "                cost = cost_configuration(new_assignments, assignment_costs)\n",
    "                costs.append(cost)\n",
    "\n",
    "            if ((cost_configuration(new_assignments, assignment_costs) > cost) and (rand < probability)):\n",
    "                assignments = new_assignments\n",
    "                cost = cost_configuration(new_assignments, assignment_costs)\n",
    "\n",
    "    return assignments, b_cost\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Experiments for different problem parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 466,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " \n",
      " Input Data  \n",
      " number of clients: 20 \n",
      " number of facilities: 15 \n",
      " facilities capacity: 4 \n",
      " \n",
      " Greedy algorithm \n",
      " cost: 9.73979936113\n",
      "\n",
      " Local optimization \n",
      " cost: 8.61146698083\n",
      "\n",
      " Simulated annealing \n",
      " cost: 8.10537595959\n",
      "\n",
      " \n",
      " Input Data  \n",
      " number of clients: 60 \n",
      " number of facilities: 25 \n",
      " facilities capacity: 4 \n",
      " \n",
      " Greedy algorithm \n",
      " cost: 34.3438611472\n",
      "\n",
      " Local optimization \n",
      " cost: 21.0717803106\n",
      "\n",
      " Simulated annealing \n",
      " cost: 20.788296171\n",
      "\n",
      " \n",
      " Input Data  \n",
      " number of clients: 100 \n",
      " number of facilities: 35 \n",
      " facilities capacity: 4 \n",
      " \n",
      " Greedy algorithm \n",
      " cost: 60.4708301483\n",
      "\n",
      " Local optimization \n",
      " cost: 31.5577560733\n",
      "\n",
      " Simulated annealing \n",
      " cost: 31.3242567361\n",
      "\n",
      " \n",
      " Input Data  \n",
      " number of clients: 140 \n",
      " number of facilities: 45 \n",
      " facilities capacity: 4 \n",
      " \n",
      " Greedy algorithm \n",
      " cost: 70.924188792\n",
      "\n",
      " Local optimization \n",
      " cost: 41.9725011997\n",
      "\n",
      " Simulated annealing \n",
      " cost: 41.7909540669\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/anastasia/anaconda/lib/python2.7/site-packages/ipykernel/__main__.py:192: RuntimeWarning: overflow encountered in exp\n"
     ]
    }
   ],
   "source": [
    "from gurobipy import *\n",
    "\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "from numpy import random\n",
    "from numpy import matlib\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "np.random.seed(1)\n",
    "\n",
    "Cs = np.arange(20, 160, 40); # number of clients\n",
    "Fs = np.arange(15, 70, 10); #number of facilities\n",
    "\n",
    "for i in range (0, 4):\n",
    "    C = Cs[i]\n",
    "    F = Fs[i]\n",
    "    clients = np.random.rand(2,C); #client positions\n",
    "    facilities = np.random.rand(2,F);\n",
    "    capacities = np.ones((F,))*4;#maximum number of clients per facility\n",
    "\n",
    "    dx = np.matlib.repmat(clients[0,:],F,1) - np.matlib.repmat(facilities[0,:],C,1).transpose();\n",
    "    dy = np.matlib.repmat(clients[1,:],F,1) - np.matlib.repmat(facilities[1,:],C,1).transpose();\n",
    "\n",
    "    assignment_costs = 3*(dx*dx + dy*dy); #the assignment cost is the distance squared\n",
    "\n",
    "    threshold = 4\n",
    "    opening_cost = 1\n",
    "\n",
    "\n",
    "    print \"\\n \\n Input Data \", \"\\n number of clients:\", C, \"\\n number of facilities:\", F,\"\\n facilities capacity:\", threshold, \n",
    "\n",
    "\n",
    "    cost, opened_facilities, assignments, facility_occupancy = greedy(assignment_costs, opening_cost, threshold)\n",
    "    print \"\\n \\n Greedy algorithm\",\"\\n cost:\", cost \n",
    "    #\"\\n facilities to open:\", opened_facilities, \n",
    "    #print \"greedy\", facility_occupancy \n",
    "\n",
    "    # plot the solution\n",
    "    facilities_assignments = np.zeros(F)\n",
    "    for i in opened_facilities:\n",
    "        facilities_assignments[i] = 1\n",
    "    clients_assignment = np.arange(0, C)\n",
    "\n",
    "\n",
    "    assignments, cost = local(assignment_costs, opening_cost, threshold)\n",
    "    print \"\\n Local optimization\", \"\\n cost:\", cost\n",
    "     #\"\\n facilities to open:\", set(assignments.values()), \n",
    "\n",
    "\n",
    "    facility_occupancy = calc_fclt_occup(assignments, F)\n",
    "    #print \"local\", facility_occupancy     \n",
    "\n",
    "\n",
    "    assignments, cost = simulated_annealing (assignment_costs, opening_cost, threshold)\n",
    "    print \"\\n Simulated annealing\",\"\\n cost:\", cost \n",
    "    # \"\\n facilities to open:\", set(assignments.values()), \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "** Problem 2 **: *Optimal vehicle speed scheduling (6 points) *-- (based on an additional exercise A3.20 to Boyd and Vandenberghe). \n",
    "\n",
    "A vehicle (say, an airplane) travels along a fixed path of *n* segments, between *n + 1* waypoints labeled *0, . . . , n*. Segment *i* starts at waypoint *i − 1* and terminates at waypoint *i*. The vehicle starts at time *t = 0* at waypoint *0*. It travels over each segment at a constant (nonnegative) speed; *si* is the speed on segment *i*. We have lower and upper limits on the speeds: *smin ≤ s ≤ smax*. The vehicle does not stop at the waypoints; it simply proceeds to the next segment. The travel distance of segment *i* is *di* (which is positive), so the travel time over segment *i* is *di/si*. We let *τi*, *i = 1, . . . , n,* denote the time at which the vehicle arrives at waypoint *i*. The vehicle is required to arrive at waypoint *i*, *for i = 1, . . . , n*, between times *τmin,i* and *τmax,i* , which are given. The vehicle consumes fuel over segment *i* at a rate that depends on its speed *Φ(s_i )=a s_i^2+b s_i+c kg/s*.\n",
    "\n",
    "You are given the data *d* (segment travel distances), *smin* and *smax* (speed bounds), *τmin* and *τmax* (waypoint arrival time bounds), and the the parameters *a*, *b*, and *c* (all parameters are in *veh_speed_sched_data.m*). Use the dynamic programming approach to find the schedule that allows spending the minimal amount of fuel. Use matplotlib command *step* to plot speed vs time for the optimal schedule. You will need to discretize some continuous variables, make sure you do it densely enough. **NB**: later in the course we will get back to this problem and attack it with a different method.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solution\n",
    "\n",
    "Our main goal is to minimize the sum $$ $$.\n",
    "We descritize all time intervals into N points, which is a parametr of the Dynamic function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import scipy.io as sio\n",
    "\n",
    "mat_contents = sio.loadmat('veh_sched_data.mat')\n",
    "\n",
    "a = mat_contents['a']\n",
    "b = mat_contents['b']\n",
    "c = mat_contents['c']\n",
    "d = mat_contents['d']\n",
    "n = mat_contents['n']\n",
    "smin = mat_contents['smin']\n",
    "smax = mat_contents['smax']\n",
    "tau_min = mat_contents['tau_min']\n",
    "tau_max = mat_contents['tau_max']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import numba as nb\n",
    "from numba import jit\n",
    "\n",
    "def Fuel(s):\n",
    "    return a * s**2 + b*s + c\n",
    "\n",
    "\n",
    "n = len(tau_min)\n",
    "  \n",
    "def Dynamic(N):\n",
    "    \n",
    "    fuels = np.zeros((n + 1, N))\n",
    "    t_points = np.zeros((n + 1, N))\n",
    "    steps = np.zeros(n + 1)\n",
    "    valid = np.zeros((n + 1, N ))\n",
    "\n",
    "    v = np.zeros((n, N))\n",
    "    path = np.zeros((n, N))\n",
    "    \n",
    "    for j in range (1, n + 1):\n",
    "        steps[j] = (tau_max[j - 1] - tau_min[j - 1]) / N \n",
    "        t_points[j, :] = np.linspace(tau_min[j - 1], tau_max[j - 1] + step, num = N)\n",
    "        \n",
    "    for i in range(n):\n",
    "        for j in range(N):\n",
    "            first_valid = 0\n",
    "            for k in range(N):\n",
    "                if valid[i, k] == 0:\n",
    "                    dt = t_points[i + 1, j] - t_points[i, k]\n",
    "                    speed = d[i][0] / dt\n",
    "                    if (speed <= smax[i][0] and speed >= smin[i][0]):\n",
    "                        new_fuel = F(speed) * dt\n",
    "                        \n",
    "                        if (first_valid == 0):\n",
    "                            fuels[i + 1, j] = fuels[i, k] + new_fuel\n",
    "                            first_valid +=1\n",
    "                            v[i, j] = speed\n",
    "                            path[i, j] = k\n",
    "\n",
    "                        else:\n",
    "                            if fuels[i + 1, j] > fuels[i][k] + new_fuel:\n",
    "                                fuels[i + 1][j] = fuels[i][k] + new_fuel\n",
    "                                v[i,j] = speed\n",
    "                                path[i, j] = k \n",
    "                                print k\n",
    "                                \n",
    "            if (first_valid == 0):\n",
    "                valid[i + 1, j] = 1\n",
    "                fuels[i + 1, j] = 666666\n",
    "                \n",
    "    \n",
    "    \n",
    "    index_for_best = np.argmin(fuels[n,:])\n",
    "    velocities = np.zeros(n)\n",
    "    i = n - 1 \n",
    "    while i > 0:\n",
    "        velocities[i] = v[i, int(path[i, index_for_best])]\n",
    "        index_for_best = int(path[i - 1, int(path[i, index_for_best])])\n",
    "        i -= 1\n",
    "        #print index_for_best\n",
    "    return fuels[n, :], velocities\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
